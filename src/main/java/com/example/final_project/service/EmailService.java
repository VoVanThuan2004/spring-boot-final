package com.example.final_project.service;

import com.example.final_project.entity.CartItem;
import com.example.final_project.entity.Order;
import jakarta.mail.MessagingException;
import lombok.RequiredArgsConstructor;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import java.text.NumberFormat;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Locale;

@Service
@RequiredArgsConstructor
public class EmailService {
    private final JavaMailSender javaMailSender;

    @Value("${spring.mail.username}")
    private String fromEmail;

    public void send(String toEmail, String subject, String body) {
            try {
                SimpleMailMessage message = new SimpleMailMessage();
                message.setFrom(fromEmail);
                message.setTo(toEmail);
                message.setSubject(subject);
                message.setText(body);
                javaMailSender.send(message);
            } catch (Exception e) {
                e.printStackTrace(); // ho·∫∑c log l·ªói
            }
    }

    /**
     * G·ª≠i email khi t·∫°o t√†i kho·∫£n cho kh√°ch m·ªõi ch∆∞a ƒëƒÉng nh·∫≠p
     */
    public void sendAccountCreated(String toEmail, String plainPassword) {
        String subject = "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i SpringCommerce!";
        String body = "Xin ch√†o,\n\n"
                + "B·∫°n v·ª´a ƒë∆∞·ª£c t·∫°o t√†i kho·∫£n t·ª± ƒë·ªông khi ƒë·∫∑t h√†ng t·∫°i SpringCommerce.\n"
                + "Email ƒëƒÉng nh·∫≠p: " + toEmail + "\n"
                + "M·∫≠t kh·∫©u t·∫°m th·ªùi: " + plainPassword + "\n\n"
                + "B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√† ƒë·ªïi m·∫≠t kh·∫©u b·∫•t k·ª≥ l√∫c n√†o.\n"
                + "Tr√¢n tr·ªçng,\nSpringCommerce Team";
        send(toEmail, subject, body);
    }

    /**
     * G·ª≠i email khi kh√¥i ph·ª•c password
     */
    public void sendOTPEmailRecoveryPassword(String toEmail, String otp) {
        String subject = "M√£ OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u";
        String content = "Ch√†o " + toEmail + ",\n\n"
                + "M√£ OTP ƒë·ªÉ kh√¥i ph·ª•c m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: " + otp + "\n\n"
                + "M√£ OTP c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.\n"
                + "N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, vui l√≤ng b·ªè qua email n√†y.\n\n"
                + "C·∫£m ∆°n b·∫°n.";

        send(toEmail, subject, content);
    }

    /*
     * G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
     */

    public void sendOrderConfirmation(String toEmail, Order order, List<CartItem> items) {
        // Currency formatter for VND
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
        // Date formatter
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        // Build plain text content
        StringBuilder content = new StringBuilder();
        content.append("üõí ƒê∆†N H√ÄNG C·ª¶A B·∫†N ƒê√É ƒê∆Ø·ª¢C X√ÅC NH·∫¨N!\n")
                .append("========================================\n\n")
                .append("M√£ ƒë∆°n h√†ng: ").append(order.getId()).append("\n")
                .append("Ng√†y ƒë·∫∑t h√†ng: ").append(order.getPurchaseDate().format(dateFormatter)).append("\n")
                .append("ƒê·ªãa ch·ªâ giao h√†ng: ")
                .append(order.getAddressDetail()).append(", ")
                .append(order.getWard()).append(", ")
                .append(order.getDistrict()).append(", ")
                .append(order.getProvince()).append("\n\n")
                .append("üì¶ DANH S√ÅCH S·∫¢N PH·∫®M\n")
                .append("----------------------------------------\n");

        // Format product list as a table-like structure
        content.append(String.format("%-30s %-10s %-15s\n", "S·∫£n ph·∫©m", "S·ªë l∆∞·ª£ng", "Gi√°"));
        content.append("----------------------------------------\n");
        for (CartItem item : items) {
            String productName = item.getVariant().getVariantName();
            // Truncate product name if too long to avoid breaking alignment
            if (productName.length() > 27) {
                productName = productName.substring(0, 24) + "...";
            }
            content.append(String.format("%-30s %-10d %-15s\n",
                    productName,
                    item.getQuantity(),
                    currencyFormat.format(item.getPrice())));
        }

        content.append("----------------------------------------\n")
                .append(String.format("T·ªïng c·ªông: %s\n\n", currencyFormat.format(order.getTotalAmount())))
                .append("C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i SpringCommerce!\n")
                .append("Tr√¢n tr·ªçng,\n")
                .append("SpringCommerce Team\n");

        // Send the email
        send(toEmail, "X√°c nh·∫≠n ƒë∆°n h√†ng #" + order.getId(), content.toString());
    }
}
